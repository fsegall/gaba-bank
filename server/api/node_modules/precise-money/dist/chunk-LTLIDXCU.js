import {
  DEC,
  fromMinor,
  toMinor
} from "./chunk-27ZSX5IA.js";

// src/adapters/cosmos.ts
function cosmosToMinor(h, decimals = 6) {
  return toMinor(h, decimals);
}
function cosmosFromMinor(u, decimals = 6) {
  return fromMinor(u, decimals);
}
function cosmosResolveDecimals(params, fallback = 6) {
  const { denom, symbol, chainId } = params ?? {};
  if (denom && chainId) {
    const d = DEC.getById({ chain: "cosmos", symbol: symbol ?? "", address: denom, chainId: Number(chainId) });
    if (typeof d === "number") return d;
  }
  if (denom) {
    const d = DEC.getById({ chain: "cosmos", symbol: symbol ?? "", address: denom });
    if (typeof d === "number") return d;
  }
  if (symbol) {
    const d = DEC.get(symbol);
    if (typeof d === "number") return d;
  }
  return fallback;
}
async function cosmosFetchDecimalsViaBank(client, denom) {
  const md = await client.bankDenomMetadata(denom);
  const units = md?.denom_units ?? [];
  const byDisplay = units.find((u) => u.denom === (md?.display || ""));
  if (byDisplay?.exponent != null) return Number(byDisplay.exponent);
  const max = units.reduce((m, u) => Math.max(m, Number(u.exponent ?? 0)), 0);
  return max || 6;
}
async function cosmosEnsureDecimals(args, fallback = 6) {
  const { client, denom, symbol, chainId } = args ?? {};
  if (client && denom) {
    try {
      return await cosmosFetchDecimalsViaBank(client, denom);
    } catch {
    }
  }
  return cosmosResolveDecimals({ denom, symbol, chainId }, fallback);
}

export {
  cosmosToMinor,
  cosmosFromMinor,
  cosmosResolveDecimals,
  cosmosFetchDecimalsViaBank,
  cosmosEnsureDecimals
};
