import {
  DEC,
  fromMinor,
  toMinor
} from "./chunk-27ZSX5IA.js";

// src/adapters/evm.ts
function evmToMinor(human, decimals = 18) {
  return toMinor(human, decimals);
}
function evmFromMinor(minor, decimals = 18) {
  return fromMinor(minor, decimals);
}
function evmResolveDecimals(params, fallback = 18) {
  const { symbol, address, chainId } = params ?? {};
  if (address && typeof chainId === "number") {
    const byId = DEC.getById({ chain: "evm", symbol: symbol ?? "", address, chainId });
    if (typeof byId === "number") return byId;
  }
  if (symbol) {
    const bySym = DEC.get(symbol);
    if (typeof bySym === "number") return bySym;
  }
  return fallback;
}
async function evmFetchDecimalsViaViem(client, token) {
  const erc20Abi = [{
    type: "function",
    stateMutability: "view",
    name: "decimals",
    inputs: [],
    outputs: [{ name: "", type: "uint8" }]
  }];
  const d = await client.readContract({ address: token, abi: erc20Abi, functionName: "decimals" });
  const n = Number(d);
  if (!Number.isFinite(n) || n < 0 || n > 36) throw new Error(`invalid decimals from chain: ${d}`);
  return n;
}
async function evmEnsureDecimals(args, fallback = 18) {
  const { client, address, chainId, symbol } = args;
  if (client && address) {
    try {
      return await evmFetchDecimalsViaViem(client, address);
    } catch {
    }
  }
  return evmResolveDecimals({ symbol, address, chainId }, fallback);
}

export {
  evmToMinor,
  evmFromMinor,
  evmResolveDecimals,
  evmFetchDecimalsViaViem,
  evmEnsureDecimals
};
