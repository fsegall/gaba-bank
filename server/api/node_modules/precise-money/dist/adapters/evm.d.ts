/**
* Pure formatting with a safe default.
* NOTE: 18 is correct for ETH and many ERC-20s, but NOT universal. Prefer resolving decimals.
*/
declare function evmToMinor(human: string | number, decimals?: number): bigint;
declare function evmFromMinor(minor: bigint, decimals?: number): string;
/** Resolve decimals using the runtime registry first, then fallback to a provided default (18). */
declare function evmResolveDecimals(params: {
    symbol?: string;
    address?: `0x${string}`;
    chainId?: number;
}, fallback?: number): number;
/** Optional: fetch decimals from chain via a minimal viem-compatible client. */
declare function evmFetchDecimalsViaViem(client: {
    readContract: (args: {
        address: `0x${string}`;
        abi: any;
        functionName: 'decimals';
    }) => Promise<any>;
}, token: `0x${string}`): Promise<number>;
/** Convenience helper combining on-chain fetch with registry fallback. */
declare function evmEnsureDecimals(args: {
    client?: {
        readContract: (a: any) => Promise<any>;
    };
    address?: `0x${string}`;
    chainId?: number;
    symbol?: string;
}, fallback?: number): Promise<number>;

export { evmEnsureDecimals, evmFetchDecimalsViaViem, evmFromMinor, evmResolveDecimals, evmToMinor };
