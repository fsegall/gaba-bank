import {
  DEC,
  fromMinor,
  toMinor
} from "./chunk-27ZSX5IA.js";

// src/adapters/solana.ts
function solanaToMinor(human, decimals = 9) {
  return toMinor(human, decimals);
}
function solanaFromMinor(minor, decimals = 9) {
  return fromMinor(minor, decimals);
}
function solanaResolveDecimals(params, fallback = 9) {
  const { symbol, mint } = params ?? {};
  if (mint) {
    const byId = DEC.getById({ chain: "solana", symbol: symbol ?? "", address: mint });
    if (typeof byId === "number") return byId;
  }
  if (symbol) {
    const bySym = DEC.get(symbol);
    if (typeof bySym === "number") return bySym;
  }
  return fallback;
}
async function solanaFetchMintDecimalsViaParsed(connection, mintPubkey) {
  const info = await connection.getParsedAccountInfo(mintPubkey);
  const dec = Number(
    info?.value?.data?.parsed?.info?.decimals ?? info?.value?.data?.info?.decimals
  );
  if (!Number.isFinite(dec) || dec < 0 || dec > 36) throw new Error("invalid decimals for mint");
  return dec;
}
async function solanaEnsureDecimals(args, fallback = 9) {
  const { connection, mint, symbol } = args ?? {};
  if (connection && mint) {
    try {
      return await solanaFetchMintDecimalsViaParsed(connection, mint);
    } catch {
    }
  }
  return solanaResolveDecimals({ symbol, mint: typeof mint === "string" ? mint : void 0 }, fallback);
}

export {
  solanaToMinor,
  solanaFromMinor,
  solanaResolveDecimals,
  solanaFetchMintDecimalsViaParsed,
  solanaEnsureDecimals
};
